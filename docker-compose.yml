version: '3.8'

services:
  nginx:
    image: openresty/openresty:alpine
    env_file:
      - .env.dev
    volumes:
      # Mount the configuration directly into OpenResty's default path
      - ./nginx/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf:ro
      - ./nginx/log_format.conf:/usr/local/openresty/nginx/conf/log_format.conf:ro
      - ./nginx/app_logger.lua:/usr/local/openresty/nginx/conf/app_logger.lua:ro
      - ./nginx/app_logger_body.lua:/usr/local/openresty/nginx/conf/app_logger_body.lua:ro
      - ./nginx/routes.conf:/usr/local/openresty/nginx/conf/routes.conf:ro
      - ./nginx/logs:/var/log/nginx
    # Docker Compose already injects them from your .env.dev file.
#    command: /bin/sh -c "envsubst < /etc/nginx/templates/nginx.conf.template > /usr/local/openresty/nginx/conf/nginx.conf && /usr/local/openresty/bin/openresty -g 'daemon off;'"
    networks:
      - app_network
    # No depends_on; Nginx is flexible because of the resolver.

#  java-client:
#    build: ./java-client
#    restart: always
#    ports:
#      - "8081:8081" # External requests arrive on this port (from a browser)
#      # Maps host port 80 to container port 8081.
#    networks:
#      - app_network
#    environment:
#      SERVER_PORT: 8081 # Client application port
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 30s

#  java-backend:
#    build: ./java-backend
#    restart: always
#    ports:
#      - "8082:8082" # External requests arrive on this port (from a browser)
#    networks:
#      - app_network
#    environment:
#      SERVER_PORT: 8082 # Backend application port
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 30s

#  java-backend2:
#    build: ./java-backend2
#    restart: always
#    ports:
#      - "8083:8083"
#    networks:
#      - app_network
#    environment:
#      SERVER_PORT: 8083
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 30s

networks:
  app_network:
    driver: bridge